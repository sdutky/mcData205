head	1.1;
access;
symbols;
locks
	dutky:1.1; strict;
comment	@# @;


1.1
date	2020.04.19.18.36.46;	author dutky;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@---
title: "Preliminary Figures Joining Principal Data Sets"
author: "Steve Dutky Montgomery College"
date: "3/6/2020"
output: html_document
---

```{r eval=FALSE}

#$Log$

```


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
### [Montgomery County 2010 Census Block Groups](https://data.montgomerycountymd.gov/api/views/y2z8-tsry/rows.csv?accessType=DOWNLOAD)
### [Maryland Property Parcel Dataset Montgomery Count Filter]( https://opendata.arcgis.com/datasets/042c633a05df48fa8561f245fccdd750_0.csv?where=JURSCODE%20%3D%20%27MONT%27&outSR=%7B%22latestWkid%22%3A3857%2C%22wkid%22%3A102100%7D) residential,not owner occupied, mc
### [Maryland Property Parcel Dataset Montgomery Count Filter](https://opendata.arcgis.com/datasets/042c633a05df48fa8561f245fccdd750_0.zip?where=JURSCODE%20%3D%20%27MONT%27%20AND%20OOI%20%3D%20%27N%27%20AND%20%20(DESCLU%20%3D%20%27Residential%27%20OR%20DESCLU%20%3D%20%27Residential%20Condominium%27%20OR%20DESCLU%20%3D%20%27Town%20House%27%20OR%20DESCLU%20%3D%20%27Apartments%27) residential,not owner occupied, mc

```{r}
# Load Libaries
library(plyr) # must be loaded before tidyverse
library(tidyverse)
library(lubridate)
library(pander)
library(ggmap)
library(sp)
library(fuzzyjoin)

```

```{r}
# get housing code violations
colTypes<-paste(rep("c",1000),collapse = "")

#hcv<-read_csv("https://data.montgomerycountymd.gov/api/views/k9nj-z35d/rows.csv?accessType=DOWNLOAD",col_types = colTypes)
#hcv<-read_csv("https://github.com/sdutky/mcData205/raw/master/mcHousingCodeViolations/Housing_Code_Violations.zip",col_types = colTypes)

fnHcv<-paste(tempdir(),"/mcHcv.zip",sep="")
download.file("https://github.com/sdutky/mcData205/raw/master/mcHousingCodeViolations/Housing_Code_Violations.zip",fnHcv,mode = "wb")
hcv<-read_csv(fnHcv,col_types = colTypes)
```


```{r}
names(hcv)<- c(
      "caseId",
      "dateFiled",
      "dateAssigned",
      "dateClosed",
      "disposition",
      "streetAddress",
      "unitNumber",
      "city",
      "zipCode",
      "serviceRequestNumber",
      "dateServiceRequestCreated",
      "dateServiceRequestClosed",
      "serviceRequestStatus",
      "violationId",
      "dateInspected",
      "dateCorrected",
      "locationDescription",
      "action",
      "codeReference",
      "condition",
      "item",
      "latitude",
      "longitude",
      "location"
)

hcv <- hcv %>%
  mutate(
    dateFiled= ymd(dateFiled),
    dateAssigned= ymd(dateAssigned),
    dateClosed= ymd(dateClosed),
    dateServiceRequestCreated= ymd(dateServiceRequestCreated),
    dateServiceRequestClosed= ymd(dateServiceRequestClosed),
    dateInspected= ymd(dateInspected),
    dateCorrected= ymd(dateCorrected),
    latitude= as.numeric(latitude),
    longitude= as.numeric(longitude)
  )


```



```{r}
# get 2010 Census Block Groups

mcBg<-read_csv("https://data.montgomerycountymd.gov/api/views/y2z8-tsry/rows.csv?accessType=DOWNLOAD",col_types = colTypes)

```
```{r}
# download and assemble zip file from GitHub
fnPP<-tempfile(c("part1","part2"))
fnPP[3]<-paste(tempdir(),"/mcPP.zip",sep="")

download.file("https://github.com/sdutky/mcData205/raw/master/mdParcelPoints/mdParcelPoints00",
              fnPP[1],mode="wb")
download.file("https://github.com/sdutky/mcData205/raw/master/mdParcelPoints/mdParcelPoints01",
              fnPP[2],mode="wb")
system(paste("cat",fnPP[1],fnPP[2],">",fnPP[3]))
```


```{r eval=TRUE}

# get parcel points
mcPp<-read_csv( fnPP[3],  col_types = paste(rep("c",134),collapse="",sep=""))
  
# originally from  "https://opendata.arcgis.com/datasets/042c633a05df48fa8561f245fccdd750_0.csv?where=JURSCODE%20%3D%20%27MONT%27&outSR=%7B%22latestWkid%22%3A3857%2C%22wkid%22%3A102100%7D",


```

```{r}
# get columns of interest
mcPp<- mcPp %>%
    select(
      X,
      Y,
      OBJECTID,
      JURSCODE,
      BG2010,
      OOI,
      RESITYP,
      ADDRESS,
      STRTNUM,
      STRTDIR,
      STRTNAM,
      STRTTYP,
      STRTSFX,
      STRTUNT,
      ADDRTYP,
      CITY,
      ZIPCODE,
      OWNNAME1,
      NAMEKEY,
      OWNADD1,
      OWNADD2,
      OWNCITY,
      OWNSTATE,
      OWNERZIP,
      ZONING,
      DESCLU,
      ACRES,
      TRADATE,
      YEARBLT,
      SQFTSTRC,
      STRUGRAD,
      DESCBLDG,
      LASTINSP,
      BLDG_STORY,
      BLDG_UNITS,
      RESI2010
    )

```
```{r}
# give them friendlier names
    names(mcPp)<-c(
      "longitude",            #
      "latitude",            #
      "objectId",       #
      "jursCode",       #
      "bg2010",         #
      "ownerOccupancy", #
      "residenceType",  #
      "address",        #
      "streetNum",      #
      "streetDir",      #
      "streetNam",      #
      "streetTyp",      #
      "streetSfx",      #
      "streetUnt",      #
      "addrtyp",        #
      "city",           #
      "zipcode",        #
      "ownname1",       #
      "namekey",        #
      "ownadd1",        #
      "ownadd2",        #
      "owncity",        #
      "ownstate",       #
      "ownerzip",       #
      "zoning",         #
      "descLandUse",    #
      "acres",          #
      "lastSale",       #
      "yearBuilt",      #
      "sqftStrc",       #
      "struGrad",       #
      "descBldg",       #
      "lastInsp",       #
      "bldgStory",      #
      "bldgUnits",      #
      "resi2010"        #
    )

# fixed column classes

mcPp<- mcPp %>%
  mutate(
    longitude=as.numeric(longitude),
    latitude=as.numeric(latitude),
    acres=as.numeric(acres),
    yearBuilt=as.numeric(yearBuilt),
    sqftStrc=as.numeric(sqftStrc),
    lastInsp=as.numeric(lastInsp),
    bldgStory=as.numeric(bldgStory),
    bldgUnits=as.numeric(bldgUnits),
    lastSale=ymd(lastSale),
    lastInsp=ymd(paste(lastInsp,"01",sep=""))
    
    
  )  

```

```{r}
frq<-lapply(mcPp,plyr::count)
sumFreq<-lapply(frq,function(a) quantile(a$freq))
```

```{r}
cn<-hcv %>% select(dateFiled,caseId,violationId,serviceRequestNumber) %>%
  group_by(year=year(dateFiled)) %>% 
  filter(year>2012 & year<2020) %>%
  mutate(case=as.numeric(caseId)) %>%
  summarise(
    totalCases=max(case)-min(case),
    citedCases=n_distinct(caseId),
    from311Request=n_distinct(serviceRequestNumber,na.rm = TRUE),
    violationsCited=n()
  ) 
```

```{r}
# define summaryRentals: residential properties (2010) not occupied by owner
mcRentalsPp<-mcPp %>%
      mutate(
              address=paste(address,zipcode,sep = " "),
              address=tolower(gsub("  *"," ",address)),
              address=gsub("[^a-z0-9 ]","",address),
              address=gsub(" $","",address),
              address=sub("road 2","rd 2",address),
              address=sub("lane 2","ln 2",address),
              address=sub("circle 2","cir 2",address),
              bldgUnits=pmax(bldgUnits,1),
              descBldg=mapply(function(a,b) { if (is.na(a)) b else a }, descBldg,residenceType )
      ) %>%
      filter(resi2010=="0",
             !is.na(streetNam),
             ownerOccupancy=="N",
             descLandUse %in% c("Residential","Residential Condominium","Apartments"),
             descBldg %in% c(
                 "SF",
                 "DWEL Standard Unit",
                 "DWEL Condominium Garden Unit",
                 "DWEL Center Unit",
                 "DWEL Condominium High Rise",
                 "DWEL End Unit",
                 "DWEL Condominium Townhouse",
                 "DWEL Split Level",
                 "AP",
                 "DWEL Split Foyer",
                 "HOUSING Apartment(s)",
                 "HOUSING Residence Multiple",
                 "CARE Home for the Elderly"
             )
      ) 


tallyBldgs <- mcRentalsPp %>% select(descBldg) %>% group_by(descBldg) %>% summarise(count=n()) %>% arrange(desc(count))
tallyLandUse <- mcRentalsPp %>% select(descLandUse) %>% group_by(descLandUse) %>% summarise(count=n()) %>% arrange(desc(count))
tallyUnits <- mcRentalsPp %>% select(bldgUnits) %>% group_by(bldgUnits) %>% summarise(count=n()) %>% arrange(desc(count))



```

```{r}
summaryRentals<-mcRentalsPp %>%
      summarise(
        totalProperties=n(),
        totalUnits=sum(bldgUnits),
        minUnits=min(bldgUnits),
        q25=quantile(bldgUnits,probs = .25),
        meanUnits=mean(bldgUnits),
        q75=quantile(bldgUnits,probs = .75),
        maxUnits=max(bldgUnits)
      )
```

```{r}
# mc 311 service requests, previously filtered to include DHCA requests
fn311<-paste(tempdir(),"/mc311hca.zip",sep="")
download.file("https://github.com/sdutky/mcData205/raw/master/mc311hca/mc311HcaCode.zip",fn311,mode = "wb")
mc311hca<-read_csv(fn311)
cn311 <- mc311hca %>%
      mutate(mdy=sub("^([0-9/]+).*$","\\1",Opened),year=year(mdy(mdy))) %>%
      filter(year>2012 & year<2020) %>%
      group_by(year) %>%
      summarise(`311referrals`=n()) %>%
  inner_join(cn)

panderCounts<-cn311
save(panderCounts,file="panderCounts.rdata")
pandersummaryRentals<-summaryRentals
save(pandersummaryRentals,file="pandersummaryRentals.rdata")

pander(pandersummaryRentals)
pander(panderCounts)
```

```{r}
#match distances
mhcv<- hcv  %>%
  mutate(address=paste(streetAddress,zipCode,sep=" "),
         address=tolower( gsub("  *"," ",address) ),
         address=gsub("[^a-z0-9 ]","",address),
         address=gsub(" $","",address),
         address=sub("road 2","rd 2",address),
         address=sub("lane 2","ln 2",address),
         address=sub("circle 2","cir 2",address)
         ) %>%
  distinct(longitude,latitude,caseId,address)

mRpp<-mcPp %>%
      mutate(
              address=paste(address,zipcode,sep = " "),
              address=tolower(gsub("  *"," ",address)),
              address=gsub("[^a-z0-9 ]","",address),
              address=gsub(" $","",address),
              bldgUnits=pmax(bldgUnits,1),
              descBldg=mapply(function(a,b) { if (is.na(a)) b else a }, descBldg,residenceType )
      ) 

i<- 1

while (i < nrow(mhcv)) {
    end<-min(i+1000, nrow(mhcv))
    match<- mhcv[i:end,]  %>%
#      geo_inner_join(mcRentalsPp,by=c("longitude","latitude"),max_dist = .05, distance_col="dist")
      geo_inner_join(mcRentalsPp,by=c("longitude","latitude"),max_dist = 90/5280, distance_col="dist")
    
    amatch<- mhcv[i:end,]  %>%
        inner_join(mcRentalsPp,by="address")
    if ( i==1 ) { cumMatch<-match ; acumMatch<-amatch }
    else { cumMatch<-rbind(cumMatch,match) ; acumMatch<-rbind(acumMatch,amatch) }
    
    i<-end+1
}    
    
```

```{r}
noMatch<- hcv %>%
      anti_join(acumMatch,by="caseId")
```

@
